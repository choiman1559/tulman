#!/usr/bin/env python3

import os
import sys
import re
from enum import Enum

version = "1.0.1"
help_string = f"""
 SSH Reverse Tunneling Configuration Tool
 Version {version} Written By. Choiman1559

 This Script is written for simplify "ssh -R" option, by automatically formatting
 Reverse port, Local Addr, and Local port and run ssh from it.

 Usage: "tulman {{start|stop|restart|status|help}} [ARCHIVE extension:conf] (-s|--stub-test) (-e|--disable-expr) (-d|--debug)"
"""


class Log:
    LEVEL_ERROR = "Error"
    LEVEL_WARNING = "Warning"
    LEVEL_DEBUG = "Debug"
    LEVEL_INFO = "Info"

    @staticmethod
    def e(message, needPrintContext=True):
        Log.printLog(Log.LEVEL_ERROR, message, needPrintContext)

    @staticmethod
    def w(message, needPrintContext=True):
        Log.printLog(Log.LEVEL_WARNING, message, needPrintContext)

    @staticmethod
    def d(message, needPrintContext=True):
        Log.printLog(Log.LEVEL_DEBUG, message, needPrintContext)

    @staticmethod
    def i(message, needPrintContext=True):
        Log.printLog(Log.LEVEL_INFO, message, needPrintContext)

    @staticmethod
    def printLog(level, message, needPrintContext=True):
        printLine = f"{level}: {message}"
        if needPrintContext:
            printLine += f" (at {Context.getLast(context.stackList).currentProcessFile} line {Context.getLast(context.stackList).currentLineNumber})"
        print(printLine)


ACTION_TYPE_NOT_SPECIFIED = "Action type not specified!"
ACTION_TYPE_NOT_SUPPORTED = "Action type not supported: \"{0}\""

CONFIG_FILE_NOT_SPECIFIED = "Configuration file not specified!"
CONFIG_FILE_NOT_FOUND = "Configuration file not found or readable!"
CONFIG_CATEGORY_TYPE_NOT_SUPPORTED = "Configuration category type not supported: \"{0}\""
CONFIG_PREF_KEY_NOT_SUPPORTED = "Configuration preference key not supported: \"{0}\""

CONFIG_FORWARD_TYPE_NOT_SUPPORTED = "Forward type \"{0}\" not supported!"
CONFIG_FORWARD_PORT_DUPLICATE = "Possible {0} port duplicate: {1}"
CONFIG_FORWARD_PORT_DUPLICATE_AUTOSSH = "Possible {0} port duplicate with AutoSSH watchdog port: {1}"

PREFIX_TYPE_UNKNOWN = "Unknown Prefix type \"{0}\", Using type \"auto\" instead..."
PREFIX_TYPE_NOT_SPECIFIED = "Prefix {0} is not specified type! Ignoring this prefix..."
PREFIX_TYPE_UNMATCH = "Unmatch-type prefix used in this context: {0} type used but in {0} context!"
PREFIX_NOT_FOUND_REFERENCE = "Prefix key \"{0}\" referenced by \"{1}\" is not declared!"
PREFIX_ARGUMENT_COUNT_UNMATCH = "Prefix \"{0}\" has {1} wildcard(s), but {2} argument(s) has given!"

RANGE_SYNTAX_LOCAL_REMOTE_LEN_NOT_MATCH = "Local and Remote port range expression length is not match: \"{0}\""
RANGE_SYNTAX_PRIORITY_TOKEN_START_ILLEGAL = "The start parenthesis expression is incorrect: \"{0}\""
RANGE_SYNTAX_PRIORITY_TOKEN_END_ILLEGAL = "The end parentheses expression is incorrect: \"{0}\""
RANGE_SYNTAX_BLANK_EXPRESSION_TOKEN = "Empty expression token exists: \"{0}\""
RANGE_SYNTAX_EXPRESSION_NOT_AN_NUMBER = "Range expression token is not numeric: \"{0}\""


class commandBuilder:
    commandStr = ""

    def append(self, commandStr):
        self.commandStr = f"{self.commandStr} {commandStr}"

    def build(self):
        return self.commandStr

    def __init__(self, init):
        self.commandStr = init

    @staticmethod
    def isYes(value):
        return value.lower() in ("yes", "true", "y", "t", "1")


class ConfigOptions:
    hostAddress = "root@localhost"
    hostPort = "22"
    localForward = "yes"
    backgroundDaemon = "yes"
    socket = "yes"
    socketPath = "/tmp/ssh-reverse-sock"
    useAutoSSH = "no"
    autoSshEchoPort = 20000

    forwardPortList = list()
    currentForwardPort = list()
    currentLocalPort = dict()

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        return setattr(self, key, value)

    def getStartCommand(self):
        if commandBuilder.isYes(self.useAutoSSH):
            sshCommand = commandBuilder("autossh")
            sshCommand.append(f"-M {self.autoSshEchoPort} -o \"ServerAliveInterval 30\" -o \"ServerAliveCountMax 3\"")
        else:
            sshCommand = commandBuilder("ssh")

            if commandBuilder.isYes(self.socket) and self.socketPath != "":
                sshCommand.append("-MS")
                sshCommand.append(self.socketPath)

        if commandBuilder.isYes(self.localForward):
            sshCommand.append("-g")

        if commandBuilder.isYes(self.backgroundDaemon):
            sshCommand.append("-fN")

        for forwardPort in self.forwardPortList:
            sshCommand.append(forwardPort.toCommand())

        sshCommand.append(self.hostAddress)
        if self.hostPort != "22":
            sshCommand.append("-p")
            sshCommand.append(self.hostPort)

        return sshCommand.build()

    def getStopCommand(self):
        if commandBuilder.isYes(self.useAutoSSH):
            sshCommand = commandBuilder("killall autossh & ssh")
        else:
            sshCommand = commandBuilder("ssh")

            if commandBuilder.isYes(self.socket) and self.socketPath != "":
                sshCommand.append("-S")
                sshCommand.append(self.socketPath)

        sshCommand.append("-O exit")
        sshCommand.append(self.hostAddress)

        if self.hostPort != "22":
            sshCommand.append("-p")
            sshCommand.append(self.hostPort)

        return sshCommand.build()

    def portListAppend(self, portObj):
        self.currentForwardPort.extend(portObj.forward_port)
        self.currentLocalPort[portObj.local_addr].extend(portObj.local_port)
        self.forwardPortList.append(portObj)


class Context:
    class ContextStack:
        currentProcessFile = ""
        currentLineNumber = 1
        currentOptionContext = ""
        currentAlias = ""

        def __init__(self, currentProcessFile=None, currentAlias=""):
            self.currentLineNumber = 1
            self.currentOptionContext = ""
            self.currentProcessFile = currentProcessFile
            self.currentAlias = currentAlias

    stubCommandRun = False
    useExpression = True
    useExprDebug = False

    stackList = None
    currentOptionObj = None

    addrPrefixDict = dict()
    portPrefixDict = dict()

    @staticmethod
    def getLast(objList):
        return objList[objList.__len__() - 1]

    @classmethod
    def setLast(cls, currentObj, contextType):
        currentObj[currentObj.__len__() - 1] = contextType

    def __init__(self, fileName):
        self.currentOptionObj = ConfigOptions()
        self.stackList = list()
        initializeStack = Context.ContextStack(fileName)
        self.stackList.append(initializeStack)


class ExtendedEnum(Enum):
    @classmethod
    def list(cls):
        return [c.value for c in cls]


class OPTION_TYPE(ExtendedEnum):
    PREFERENCE = "Preferences"
    FORWARDS = "Forwards"
    PREFIXES = "Prefixes"
    INCLUDES = "Includes"


class ACTION_TYPE(ExtendedEnum):
    START = "start"
    STOP = "stop"
    RESTART = "restart"
    STATUS = "status"
    HELP = "help"


class PrefixType(ExtendedEnum):
    PREFIX_TYPE_ADDR = "addr"
    PREFIX_TYPE_PORT = "port"
    PREFIX_TYPE_AUTO = "auto"
    
    
class ExprTokens:
    CONFIG_TOKEN_CATEGORY = "$"
    CONFIG_TOKEN_COMMENT = "#"
    CONFIG_TOKEN_FORWARD_SEPERATOR = ":"
    CONFIG_TOKEN_KEY_VALUE_SEPERATOR = "="

    PREFIX_TOKEN_WILDCARD = "*"
    PREFIX_TOKEN_REFERENCE = "&"
    PREFIX_TOKEN_ARGUMENT_START = "("
    PREFIX_TOKEN_ARGUMENT_END = ")"
    PREFIX_TOKEN_ARGUMENT_AND = ","
    PREFIX_TOKEN_ARGUMENT_NOTHING = "~"
    PREFIX_TOKEN_CLASS_IDENTIFIER = "."
    PREFIX_TOKEN_TYPE_IDENTIFIER = " "

    RANGE_TOKEN_NOT = "!"
    RANGE_TOKEN_RANGE = "-"
    RANGE_TOKEN_WEIGHT_START = "("
    RANGE_TOKEN_WEIGHT_END = ")"


class PrefixAddrExpr:
    
    rawData = ""
    isInterpreted = False
    overrideKeyCombine = ""
    argsCombine = list()
    finalData = ""

    def __init__(self):
        self.rawData = ""
        self.isInterpreted = False
        self.overrideKeyCombine = ""
        self.argsCombine = list()
        self.finalData = ""

    def interpret(self):
        prefixOverrideObj = None

        if self.overrideKeyCombine in context.addrPrefixDict.keys():
            prefixOverrideObj = context.addrPrefixDict[self.overrideKeyCombine]
        else:
            Log.w(PREFIX_NOT_FOUND_REFERENCE.format(self.overrideKeyCombine, self.rawData))

        if prefixOverrideObj is not None:
            if self.argsCombine.__len__() != prefixOverrideObj.prefixCountWildcard:
                Log.w(PREFIX_ARGUMENT_COUNT_UNMATCH.format(self.overrideKeyCombine, prefixOverrideObj.prefixCountWildcard, self.argsCombine.__len__()))

            if self.argsCombine.__len__() >= prefixOverrideObj.prefixCountWildcard:
                overrideWildcardCount = 0
                finalDataCombine = ""

                for charExpr in list(prefixOverrideObj.prefixFinalData):
                    if charExpr == ExprTokens.PREFIX_TOKEN_WILDCARD:
                        finalDataCombine += self.argsCombine[overrideWildcardCount]
                        overrideWildcardCount += 1
                    else:
                        finalDataCombine += charExpr
                self.finalData = finalDataCombine
        return self.finalData
        
    @staticmethod
    def parseFrom(data):
        newObj = PrefixAddrExpr()
        newObj.rawData = data.strip()

        isKeyStart = False
        isArgStart = False
        argCombineCache = ""

        for charExpr in list(newObj.rawData):
            if charExpr == ExprTokens.PREFIX_TOKEN_REFERENCE:
                isKeyStart = True
                continue
            elif charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_START:
                isKeyStart = False
                isArgStart = True
                continue
            elif (isArgStart and
                  (charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_AND
                   or charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_END)):
                newObj.argsCombine.append(argCombineCache.strip())
                argCombineCache = ""
                continue
            elif charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_NOTHING:
                newObj.argsCombine.append("")
                argCombineCache = ""
                continue

            if isKeyStart:
                newObj.overrideKeyCombine += charExpr
            elif isArgStart:
                argCombineCache += charExpr

        newObj.overrideKeyCombine = PrefixObj.getIncludeInnerKey(newObj.overrideKeyCombine.strip())
        return newObj

    def toString(self):
        return f"{self.rawData}, {self.isInterpreted}, {self.overrideKeyCombine}, {self.argsCombine}, {self.finalData}"


class PrefixPortExpr:

    interpretedList = list()
    finalString = ""

    def __init__(self):
        super().__init__()
        self.interpretedList = list()
        self.finalString = ""

    @staticmethod
    def parseFrom(data):
        newObj = PrefixPortExpr()
        newObj.rawData = data.strip()

        portExprList = newObj.rawData.split(ExprTokens.PREFIX_TOKEN_ARGUMENT_AND)
        for portExprSingle in portExprList:
            if portExprSingle.count(ExprTokens.PREFIX_TOKEN_REFERENCE) < 1:
                newObj.interpretedList.append(portExprSingle)
                continue

            isKeyStart = False
            keyCombineCache = ""
            strCombineCache = ""

            for charExpr in list(portExprSingle):
                if charExpr == ExprTokens.PREFIX_TOKEN_REFERENCE:
                    isKeyStart = True
                    continue
                elif isKeyStart and (charExpr == ExprTokens.RANGE_TOKEN_NOT or
                                     charExpr == ExprTokens.RANGE_TOKEN_RANGE or
                                     charExpr == ExprTokens.RANGE_TOKEN_WEIGHT_END):
                    isKeyStart = False
                    prefixOverrideObj = None
                    keyCombineCache = (PrefixObj.getIncludeInnerKey(keyCombineCache))

                    if keyCombineCache in context.portPrefixDict.keys():
                        prefixOverrideObj = context.portPrefixDict[keyCombineCache]
                    else:
                        Log.w(PREFIX_NOT_FOUND_REFERENCE.format(keyCombineCache, data))
                    if prefixOverrideObj is not None:
                        strCombineCache += prefixOverrideObj.prefixFinalData
                    continue

                if isKeyStart:
                    keyCombineCache += charExpr
                else:
                    strCombineCache += charExpr

            if isKeyStart:
                prefixOverrideObj = None
                keyCombineCache = PrefixObj.getIncludeInnerKey(keyCombineCache)

                if keyCombineCache in context.portPrefixDict.keys():
                    prefixOverrideObj = context.portPrefixDict[keyCombineCache]
                else:
                    Log.w(PREFIX_NOT_FOUND_REFERENCE.format(keyCombineCache, data))
                if prefixOverrideObj is not None:
                    strCombineCache += prefixOverrideObj.prefixFinalData

            newObj.interpretedList.append(strCombineCache)
        return newObj

    def interpret(self):
        for exprLines in self.interpretedList:
            self.finalString += f"{exprLines},"
        return self.finalString[:-1]

    def toString(self):
        return f"{self.interpretedList}, {self.finalString}"


class PrefixObj:

    prefixKey = ""
    prefixRawData = ""
    prefixFinalData = ""
    prefixType = PrefixType.PREFIX_TYPE_AUTO
    prefixCountWildcard = 0

    @staticmethod
    def getIncludeInnerKey(rawKey):
        if context.stackList.__len__() > 1 > rawKey.count(ExprTokens.PREFIX_TOKEN_CLASS_IDENTIFIER):
            return f"{Context.getLast(context.stackList).currentAlias}.{rawKey}"
        else:
            return rawKey

    @staticmethod
    def splitPreference(rawData, separator=ExprTokens.CONFIG_TOKEN_KEY_VALUE_SEPERATOR):
        key = rawData[0:rawData.index(separator)].strip()
        value = rawData[rawData.index(separator) + 1:].strip()
        return [key, value]

    @staticmethod
    def determineType(data):

        isKeyStart = False
        keyCombine = ""

        for charExpr in list(data):
            if charExpr == ExprTokens.PREFIX_TOKEN_REFERENCE:
                isKeyStart = True
                continue
            elif charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_START:
                isKeyStart = False
                continue
            elif (isKeyStart and
                  (charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_AND
                   or charExpr == ExprTokens.PREFIX_TOKEN_ARGUMENT_END)):
                break

            if isKeyStart:
                keyCombine += charExpr

        estimateKey = PrefixObj.getIncludeInnerKey(keyCombine.strip())
        if estimateKey in context.addrPrefixDict.keys():
            return PrefixType.PREFIX_TYPE_ADDR
        elif estimateKey in context.portPrefixDict.keys():
            return PrefixType.PREFIX_TYPE_PORT
        else:
            return PrefixType.PREFIX_TYPE_AUTO

    @staticmethod
    def buildFrom(data):
        newObj = PrefixObj()
        dataArray = PrefixObj.splitPreference(data)

        newObj.prefixType = PrefixType.PREFIX_TYPE_AUTO
        newObj.prefixRawData = dataArray[1]
        newObj.prefixCountWildcard = dataArray[1].count(ExprTokens.PREFIX_TOKEN_WILDCARD)

        if dataArray[0].strip().count(ExprTokens.PREFIX_TOKEN_TYPE_IDENTIFIER) > 0:
            keyTypeArray = dataArray[0].split(ExprTokens.PREFIX_TOKEN_TYPE_IDENTIFIER)
            if keyTypeArray[0] not in PrefixType.list():
                Log.w(PREFIX_TYPE_UNKNOWN.format(keyTypeArray[0]))
            else:
                newObj.prefixType = PrefixType(keyTypeArray[0])
                newObj.prefixKey = keyTypeArray[1]
        else:
            newObj.prefixKey = dataArray[0]
            
        if newObj.prefixType == PrefixType.PREFIX_TYPE_AUTO:
            newObj.prefixType = PrefixObj.determineType(newObj.prefixRawData)
            if newObj.prefixType == PrefixType.PREFIX_TYPE_AUTO:
                Log.w(PREFIX_TYPE_NOT_SPECIFIED.format(newObj.prefixRawData))

        if newObj.prefixRawData.count(ExprTokens.PREFIX_TOKEN_REFERENCE) > 0:
            prefixExprObj = None

            if newObj.prefixType == PrefixType.PREFIX_TYPE_ADDR:
                prefixExprObj = PrefixAddrExpr.parseFrom(newObj.prefixRawData)
            elif newObj.prefixType == PrefixType.PREFIX_TYPE_PORT:
                prefixExprObj = PrefixPortExpr.parseFrom(newObj.prefixRawData)
            elif newObj.prefixType == PrefixType.PREFIX_TYPE_AUTO:
                Log.w(PREFIX_TYPE_NOT_SPECIFIED.format(data))

            if prefixExprObj is not None:
                newObj.prefixFinalData = prefixExprObj.interpret()
                if context.useExprDebug:
                    Log.d(prefixExprObj.toString())
        else:
            newObj.prefixFinalData = newObj.prefixRawData

        return newObj

    def toString(self):
        return f"{self.prefixKey}, {self.prefixRawData}, {self.prefixFinalData}, {self.prefixType}, {self.prefixCountWildcard}"


class RangeObj:
    exprList = None
    includePort = None
    currentPriority = 0

    def __init__(self):
        self.exprList = list()
        self.includePort = list()
        self.currentPriority = 0

    @staticmethod
    def rangeSyntaxParse(data):
        if data.count(ExprTokens.PREFIX_TOKEN_REFERENCE) > 0:
            prefixExpr = PrefixPortExpr.parseFrom(data)
            data = prefixExpr.interpret()

        newObj = RangeObj()
        syntaxList = data.strip().split(ExprTokens.PREFIX_TOKEN_ARGUMENT_AND)

        for singleExpr in syntaxList:
            if singleExpr == "":
                Log.w(RANGE_SYNTAX_BLANK_EXPRESSION_TOKEN.format(data))
                continue
            if re.search(r"[^0-9\-!()]", singleExpr):
                Log.w(RANGE_SYNTAX_EXPRESSION_NOT_AN_NUMBER.format(singleExpr))

            singleExprObj = RangeExpr.parseSingleExpr(singleExpr.strip(), newObj.currentPriority)
            newObj.currentPriority = singleExprObj.nextPriority
            newObj.exprList.append(singleExprObj)
            if context.useExprDebug:
                Log.d("{0} {1} {2}".format(syntaxList, singleExpr, singleExprObj.toString()))
        if newObj.currentPriority > 0:
            Log.w(RANGE_SYNTAX_PRIORITY_TOKEN_START_ILLEGAL.format(data))
        return newObj

    def interpret(self):
        priorityAppliedList = list()
        for exprObj in self.exprList:
            if priorityAppliedList.__len__() == 0:
                priorityAppliedList.append(exprObj)
                continue

            count = 0
            isAdded = False

            for exprPriObj in priorityAppliedList:
                if exprObj.priority < exprPriObj.priority:
                    priorityAppliedList.insert(count, exprObj)
                    isAdded = True
                    break
                count += 1

            if not isAdded:
                priorityAppliedList.append(exprObj)

        for exprObj in priorityAppliedList:
            for i in range(exprObj.start, exprObj.end + 1, 1):
                if exprObj.isExclude:
                    if self.includePort.count(i) > 0:
                        self.includePort.remove(i)
                else:
                    if self.includePort.count(i) < 1:
                        self.includePort.append(i)

        return self.includePort


class RangeExpr:

    priority = 0
    nextPriority = 0
    isExclude = False
    start = 0
    end = 65535

    @staticmethod
    def parseSingleExpr(data, defaultPriority=0):
        newObj = RangeExpr()
        newObj.priority = defaultPriority

        startCombine = ""
        endCombine = ""
        isStartCombineEnd = False

        startWeight = 0
        endWeight = 0

        for charExpr in list(data):
            if charExpr == ExprTokens.RANGE_TOKEN_NOT:
                newObj.isExclude = not newObj.isExclude
            elif charExpr == ExprTokens.RANGE_TOKEN_RANGE:
                if startCombine != "":
                    newObj.start = int(startCombine)
                isStartCombineEnd = True
            elif charExpr == ExprTokens.RANGE_TOKEN_WEIGHT_START:
                startWeight += 1
            elif charExpr == ExprTokens.RANGE_TOKEN_WEIGHT_END:
                endWeight += 1
            else:
                if isStartCombineEnd:
                    endCombine += charExpr
                else:
                    startCombine += charExpr

        if isStartCombineEnd:
            if endCombine != "":
                newObj.end = int(endCombine)
        else:
            if startCombine != "":
                newObj.start = int(startCombine)
            if endCombine == "":
                newObj.end = int(startCombine)

        newObj.priority += startWeight
        newObj.nextPriority = newObj.priority - endWeight

        if newObj.nextPriority < 0:
            Log.w(RANGE_SYNTAX_PRIORITY_TOKEN_END_ILLEGAL.format(data))
            newObj.nextPriority = 0

        return newObj

    def toList(self):
        portRange = list()
        for i in range(self.start, self.end, 1):
            portRange.append(i)
        return portRange

    def toString(self):
        return f"{self.priority}, {self.isExclude}, {self.start}, {self.end}"


class ForwardObject:
    rawData = ""
    forward_type = "L"
    forward_port = list()
    forward_range = "0.0.0.0"
    local_addr = "localhost"
    local_port = list()

    @staticmethod
    def parseFrom(data):
        data = data.strip()
        typeList = PrefixObj.splitPreference(data, ExprTokens.PREFIX_TOKEN_TYPE_IDENTIFIER)
        dataList = typeList[1].split(ExprTokens.CONFIG_TOKEN_FORWARD_SEPERATOR)

        obj = ForwardObject()
        obj.rawData = data
        obj.forward_type = typeList[0].upper()

        if dataList.__len__() > 3:
            rawVisibleRangeAddr = dataList[0]
            rawForwardPort = dataList[1]
            rawLocalAddr = dataList[2]
            rawLocalPort = dataList[3]

            if rawVisibleRangeAddr.startswith(ExprTokens.PREFIX_TOKEN_REFERENCE):
                prefixExpr = PrefixAddrExpr.parseFrom(rawVisibleRangeAddr)
                obj.forward_range = prefixExpr.interpret()
            else:
                obj.forward_range = rawVisibleRangeAddr
        else:
            rawForwardPort = dataList[0]
            rawLocalAddr = dataList[1]
            rawLocalPort = dataList[2]

        if context.useExpression:
            obj.forward_port = RangeObj.rangeSyntaxParse(rawForwardPort).interpret()
            obj.local_port = RangeObj.rangeSyntaxParse(rawLocalPort).interpret()

            if context.useExprDebug:
                Log.d("fw => {0}".format(obj.forward_port))
                Log.d("lc => {0}".format(obj.local_port))
        else:
            obj.forward_port = rawForwardPort
            obj.local_port = rawLocalPort

        if rawLocalAddr.startswith(ExprTokens.PREFIX_TOKEN_REFERENCE):
            prefixExpr = PrefixAddrExpr.parseFrom(rawLocalAddr)
            obj.local_addr = prefixExpr.interpret()
        else:
            obj.local_addr = rawLocalAddr
        return obj

    def toCommand(self):
        if not (self.forward_type == "L" or self.forward_type == "R"):
            Log.w(CONFIG_FORWARD_TYPE_NOT_SUPPORTED.format(self.forward_type))
        if not context.useExpression:
            return f"-{self.forward_type} {self.forward_range}:{self.forward_port}:{self.local_addr}:{self.local_port}"
        if not self.local_port.__len__() == self.forward_port.__len__():
            Log.w(RANGE_SYNTAX_LOCAL_REMOTE_LEN_NOT_MATCH.format(self.rawData))
            return ""

        cmdBuilder = commandBuilder("")
        for i in range(0, self.forward_port.__len__()):
            commandStr = f"-{self.forward_type} {self.forward_range}:{self.forward_port[i]}:{self.local_addr}:{self.local_port[i]}"
            cmdBuilder.append(commandStr)
        return cmdBuilder.build().strip()


def runIncludes(dataLine):
    dataLineList = PrefixObj.splitPreference(dataLine.strip())
    includeAlias = dataLineList[0].strip()
    includeFile = dataLineList[1].strip()

    currentStack = Context.ContextStack(includeFile, includeAlias)
    context.stackList.append(currentStack)

    with open(includeFile, "r") as includeFileObj:
        for includeLine in includeFileObj.readlines():
            interpretLine(includeLine, True, includeAlias)
            context.getLast(context.stackList).currentLineNumber += 1

    context.stackList.pop()


def interpretLine(dataLine, isExternalInclude=False, includeAlias=""):
    stripLine = dataLine.strip()
    if stripLine == "" or stripLine.startswith(ExprTokens.CONFIG_TOKEN_COMMENT):
        return
    stripLine = stripLine.split(ExprTokens.CONFIG_TOKEN_COMMENT)[0].strip()

    if stripLine.startswith(ExprTokens.CONFIG_TOKEN_CATEGORY):
        contextType = stripLine[1:]
        if contextType in OPTION_TYPE.list():
            context.getLast(context.stackList).currentOptionContext = contextType
        else:
            Log.w(CONFIG_CATEGORY_TYPE_NOT_SUPPORTED.format(contextType))
        return

    currentContext = Context.getLast(context.stackList).currentOptionContext

    if not isExternalInclude and currentContext == OPTION_TYPE.PREFERENCE.value:
        prefsToSave = PrefixObj.splitPreference(stripLine)
        try:
            context.currentOptionObj[prefsToSave[0]] = prefsToSave[1]
        except KeyError:
            Log.w(CONFIG_PREF_KEY_NOT_SUPPORTED.format(prefsToSave[0]))
        return

    if currentContext == OPTION_TYPE.INCLUDES.value:
        runIncludes(stripLine)

    if currentContext == OPTION_TYPE.FORWARDS.value:
        def getDuplicateListElement(list1, list2):
            return list(set(list1).intersection(list2))

        def hasDuplicateListElement(list1, list2):
            return getDuplicateListElement(list1, list2).__len__() > 0

        currentOption = context.currentOptionObj
        forwardPortObj = ForwardObject.parseFrom(stripLine)

        if currentOption.useAutoSSH:
            autoSSHPort = int(currentOption.autoSshEchoPort)
            autoSSHPortList = [autoSSHPort, autoSSHPort + 1]

            if hasDuplicateListElement(autoSSHPortList, forwardPortObj.forward_port):
                Log.i(CONFIG_FORWARD_PORT_DUPLICATE_AUTOSSH.format("forward", getDuplicateListElement(autoSSHPortList, forwardPortObj.forward_port)[0]))

            if hasDuplicateListElement(autoSSHPortList, forwardPortObj.local_port):
                Log.i(CONFIG_FORWARD_PORT_DUPLICATE_AUTOSSH.format("local", getDuplicateListElement(autoSSHPortList, forwardPortObj.local_port)[0]))

        if hasDuplicateListElement(currentOption.currentForwardPort, forwardPortObj.forward_port):
            Log.i(CONFIG_FORWARD_PORT_DUPLICATE.format("forward", getDuplicateListElement(currentOption.currentForwardPort, forwardPortObj.forward_port)))

        if forwardPortObj.local_addr not in currentOption.currentLocalPort.keys():
            currentOption.currentLocalPort[forwardPortObj.local_addr] = list()

        if hasDuplicateListElement(currentOption.currentLocalPort[forwardPortObj.local_addr], forwardPortObj.local_port):
            Log.i(CONFIG_FORWARD_PORT_DUPLICATE.format("local", getDuplicateListElement(currentOption.currentLocalPort[forwardPortObj.local_addr], forwardPortObj.local_port)))

        context.currentOptionObj.portListAppend(forwardPortObj)

    if currentContext == OPTION_TYPE.PREFIXES.value:
        prefixData = PrefixObj.buildFrom(stripLine)
        if context.useExprDebug:
            Log.d(prefixData.toString())

        prefixKey = prefixData.prefixKey
        if isExternalInclude:
            prefixKey = f"{includeAlias}.{prefixKey}"

        if prefixData.prefixType == PrefixType.PREFIX_TYPE_ADDR:
            context.addrPrefixDict[prefixKey] = prefixData
        elif prefixData.prefixType == PrefixType.PREFIX_TYPE_PORT:
            context.portPrefixDict[prefixKey] = prefixData


def runCommand(command):
    if context.stubCommandRun:
        Log.i(command, False)
    else:
        os.system(command)


if sys.argv.__len__() < 2:
    Log.e(ACTION_TYPE_NOT_SPECIFIED)
    exit(1)

arg_list = sys.argv
action_type = arg_list[1]

if action_type not in ACTION_TYPE.list():
    Log.e(ACTION_TYPE_NOT_SUPPORTED.format(action_type))
    exit(1)
elif action_type == ACTION_TYPE.HELP.value:
    print(help_string)
    exit(0)
elif action_type == ACTION_TYPE.STATUS.value:
    print("Stub!")
    exit(0)

if arg_list.__len__() < 3:
    Log.e(CONFIG_FILE_NOT_SPECIFIED)
    exit(1)

config_file = arg_list[2]
context = Context(config_file)

if not os.path.isfile(config_file):
    Log.e(CONFIG_FILE_NOT_FOUND)

if "-s" in arg_list or "--stub-test" in arg_list:
    context.stubCommandRun = True

if "-e" in arg_list or "--disable-expr" in arg_list:
    context.useExpression = False

if "-d" in arg_list or "--debug" in arg_list:
    context.useExprDebug = True

with open(config_file, "r") as file:
    for line in file.readlines():
        interpretLine(line)
        context.stackList[0].currentLineNumber += 1

    if action_type == ACTION_TYPE.STOP.value or action_type == ACTION_TYPE.RESTART.value:
        runCommand(context.currentOptionObj.getStopCommand())

    if action_type == ACTION_TYPE.START.value or action_type == ACTION_TYPE.RESTART.value:
        runCommand(context.currentOptionObj.getStartCommand())
